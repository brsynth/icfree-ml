'''
Plates generator module

This module generates source and destination plates from
volumes dataframes generated by sampler (or converter) module
'''
from sys import (
    modules as sys_modules,
    exit as sys_exit
)
from pandas import read_csv as pd_read_csv

from brs_utils import (
    create_logger
)

from icfree._version import __version__
from .plates_generator import (
    gen_dst_plt,
    gen_src_plt,
    set_grid_for_display
)
from .args import build_args_parser
from icfree.utils import save_df

__signature__ = f'{sys_modules[__name__].__package__} {__version__}'


def main():
    """
    Main function
    """
    parser = build_args_parser(
        signature=__signature__,
        description='Generates source and destination plates'
    )

    args = parser.parse_args()

    # CREATE LOGGER
    logger = create_logger(parser.prog, args.log)

    # Read the sampling from input file
    samples_df = pd_read_csv(args.volumes_file)

    # Generate destination plates
    try:
        dest_plates = gen_dst_plt(
            sampling_df=samples_df,
            sample_volume=args.sample_volume,
            dimensions=args.dst_plt_dim,
            well_capacity=args.dst_plt_well_capacity,
            starting_well=args.dst_start_well,
            nplicates=args.nplicates,
            # logger=logger
        )
    except ValueError as e:
        logger.error(e)
        logger.error(
            'Exiting...'
        )
        return -1

    # Generate source plates
    source_plates = gen_src_plt(
        dest_plates=dest_plates,
        well_capacity=args.src_plt_well_capacity,
        starting_well=args.src_start_well,
        dimensions=args.src_plt_dim,
        new_col=args.new_col_comp,
        dead_volume=args.src_plt_dead_volume,
    )

    # Save source plates
    for i in range(len(source_plates)):
        save_df(
            df=source_plates[i],
            outfile=f'source_plate_{i+1}.{args.output_format}',
            output_folder=args.output_folder,
            index=False,
            logger=logger
        )
    # Save destination plates
    for i in range(len(dest_plates)):
        save_df(
            df=dest_plates[i],
            outfile=f'destination_plate_{i+1}.{args.output_format}',
            output_folder=args.output_folder,
            index=False,
            logger=logger
        )

    # # Save volumes summary
    # volumes_summary = Plate.get_volumes_summary(
    #     source_plates,
    #     'pandas',
    #     logger=logger
    # )
    # save_df(
    #     df=volumes_summary,
    #     outfile='volumes_summary.tsv',
    #     output_folder=args.output_folder,
    #     index=True,
    #     logger=logger
    # )

    # Print out
    if not args.silent:
        # SRC PLT
        print("SOURCE PLATES")
        for plate in source_plates:
            grid = set_grid_for_display(plate, args.src_plt_dim)
            # Print "====" of length = nb cols of grid
            n = len(' '.join(grid.columns))
            print(f"==={'=' * n}")
            print(grid)
            print()
        # DST PLT
        print("DESTINATION PLATES")
        for plate in dest_plates:
            grid = set_grid_for_display(plate, args.dst_plt_dim)
            n = len(' '.join(grid.columns))
            print(f"==={'=' * n}")
            print(grid)
            print()


if __name__ == "__main__":
    sys_exit(main())
